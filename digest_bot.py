# filename: digest_bot.py
import os
import io
import asyncio
import logging
import datetime as dt
from typing import Dict, Any, Tuple

import aiohttp
from aiogram import Bot, Dispatcher, Router
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import BufferedInputFile, Message
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone as tz
from PIL import Image, ImageDraw, ImageFont

# --- –∞–Ω–∏–º–∞—Ü–∏—è ---
import numpy as np
from moviepy.editor import ImageSequenceClip  # pip install moviepy imageio-ffmpeg

# ================== –ö–û–ù–§–ò–ì ==================
BOT_TOKEN      = os.getenv("BOT_TOKEN", "PUT_YOUR_TOKEN_HERE")
TARGET_CHAT_ID = os.getenv("CHAT_ID", "@your_channel")        # @public_channel –∏–ª–∏ -100... –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ
TZ_NAME        = os.getenv("TZ_NAME", "Europe/Moscow")
POST_HOUR      = int(os.getenv("POST_HOUR", "9"))
POST_MINUTE    = int(os.getenv("POST_MINUTE", "0"))

USE_TICKER     = os.getenv("USE_TICKER", "1") == "1"          # 1 ‚Äî –∞–Ω–∏–º–∞—Ü–∏—è, 0 ‚Äî PNG
TICKER_AS_MP4  = os.getenv("TICKER_AS_MP4", "1") == "1"       # 1 ‚Äî MP4, 0 ‚Äî GIF
RUN_NOW        = os.getenv("RUN_NOW", "1") == "1"             # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

# —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∏–∫–µ—Ä–∞ –º–æ–∂–Ω–æ –ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TICKER_SPEED   = int(os.getenv("TICKER_SPEED", "100"))        # –ø–∏–∫—Å–µ–ª–µ–π –≤ —Å–µ–∫—É–Ω–¥—É
TICKER_DUR     = int(os.getenv("TICKER_DUR", "14"))           # —Å–µ–∫—É–Ω–¥ –∞–Ω–∏–º–∞—Ü–∏–∏

MONTHS_RU = {1:"—è–Ω–≤–∞—Ä—è",2:"—Ñ–µ–≤—Ä–∞–ª—è",3:"–º–∞—Ä—Ç–∞",4:"–∞–ø—Ä–µ–ª—è",5:"–º–∞—è",6:"–∏—é–Ω—è",
             7:"–∏—é–ª—è",8:"–∞–≤–≥—É—Å—Ç–∞",9:"—Å–µ–Ω—Ç—è–±—Ä—è",10:"–æ–∫—Ç—è–±—Ä—è",11:"–Ω–æ—è–±—Ä—è",12:"–¥–µ–∫–∞–±—Ä—è"}

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
log = logging.getLogger("digestbot")

# ================== –®–†–ò–§–¢–´ ==================
def load_font(size: int, bold=False):
    # –ü—É—Ç—å –∫ –∂–∏—Ä–Ω–æ–º—É —à—Ä–∏—Ñ—Ç—É —Å —Ö–æ—Ä–æ—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∏–º–≤–æ–ª–æ–≤
    candidates = [
        # macOS
        "/System/Library/Fonts/Supplemental/NotoSans-Bold.ttf",
        "/System/Library/Fonts/Supplemental/NotoSans-Regular.ttf",
        "/System/Library/Fonts/Supplemental/NotoSansSymbols2-Regular.ttf",
        "/System/Library/Fonts/Supplemental/Arial Unicode.ttf",
        # Linux
        "/usr/share/fonts/truetype/noto/NotoSans-Bold.ttf",
        "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf",
        "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",
    ]
    for path in candidates:
        try:
            return ImageFont.truetype(path, size=size)
        except Exception:
            continue
    return ImageFont.load_default()

FONT_56 = load_font(56, bold=True)
FONT_48 = load_font(48, bold=True)
FONT_44 = load_font(44, bold=True)
FONT_40 = load_font(40, bold=True)
FONT_36 = load_font(36, bold=True)


# ================== API ==================
async def fetch_json(session, url):
    async with session.get(url, timeout=40) as r:
        r.raise_for_status()
        return await r.json()

async def get_crypto(session):
    ids = "bitcoin,ethereum,the-open-network"
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={ids}&vs_currencies=usd&include_24hr_change=true"
    j = await fetch_json(session, url)
    def pack(k,s): return {"symbol":s,"price":float(j[k]["usd"]), "change":float(j[k]["usd_24h_change"])}
    return {"BTC":pack("bitcoin","BTC"),
            "ETH":pack("ethereum","ETH"),
            "TON":pack("the-open-network","TON")}

async def get_fx(session):
    # –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ + —Ñ–æ–ª–±—ç–∫–∏
    urls = [
        ("https://api.exchangerate.host/latest?base=USD&symbols=RUB","USD"),
        ("https://api.exchangerate.host/latest?base=EUR&symbols=RUB","EUR"),
        ("https://api.frankfurter.app/latest?from=USD&to=RUB","USD"),
        ("https://api.frankfurter.app/latest?from=EUR&to=RUB","EUR"),
        ("https://open.er-api.com/v6/latest/USD","USD"),
        ("https://open.er-api.com/v6/latest/EUR","EUR"),
    ]
    usd=eur=None
    for url, base in urls:
        try:
            j = await fetch_json(session, url)
            if "rates" in j and "RUB" in j["rates"]:
                if base=="USD": usd = float(j["rates"]["RUB"])
                else:           eur = float(j["rates"]["RUB"])
        except Exception:
            continue
        if usd and eur: break
    return {"USDRUB": usd or 83.0, "EURRUB": eur or 97.0}

# ================== –£–¢–ò–õ–ò–¢–´ –†–ò–°–û–í–ê–ù–ò–Ø ==================
def rr(d, xy, r, fill): d.rounded_rectangle(xy, radius=r, fill=fill)

def nice_num(n, d=2):
    s = f"{n:,.{d}f}".replace(",", " ")
    if "." in s: s = s.rstrip("0").rstrip(".")
    return s

# ================== –ö–õ–ê–°–°–ò–ß–ï–°–ö–ê–Ø –ë–ï–ì–£–©–ê–Ø –°–¢–†–û–ö–ê (—Ñ–æ–Ω —Å—Ç–∞—Ä–æ–≥–æ —Ç–∏–ø–∞) ==================
def build_ticker_surface(crypto, fx, width=2400, height=220):
    """
    –¢—ë–º–Ω—ã–π –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å —Ç–∏–∫–µ—Ä–∞ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
    """
    # --- —Ñ–æ–Ω: –≥–ª—É–±–æ–∫–∏–π —Å–∏–Ω–∏–π ---
    background_color = (20, 26, 40)  # —Ä–æ–≤–Ω—ã–π —Ç—ë–º–Ω–æ-—Å–∏–Ω–∏–π
    img = Image.new("RGB", (width, height), background_color)
    draw = ImageDraw.Draw(img)


    # --- –¶–≤–µ—Ç–∞ –º–æ–Ω–µ—Ç –∏ –≤–∞–ª—é—Ç ---
    colors = {
        "BTC": (247, 147, 26),   # –æ—Ä–∞–Ω–∂–µ–≤—ã–π
        "ETH": (136, 99, 255),   # —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        "TON": (0, 163, 224),    # –≥–æ–ª—É–±–æ–π
        "USD": (7, 170, 75),     # –∑–µ–ª—ë–Ω—ã–π
        "EUR": (7, 140, 190)     # —Å–∏–Ω–µ-–±–∏—Ä—é–∑–æ–≤—ã–π
    }

    # --- —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–∞ ---
    def part_coin(name, p, ch):
        arrow = "‚ñ≤" if ch >= 0 else "‚ñº"
        color = (7, 200, 85) if ch >= 0 else (240, 60, 60)
        return (f"{name} ${nice_num(p, 0 if p >= 1000 else 2)} {arrow}{abs(ch):.2f}%",
                colors.get(name, color))

    # --- —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã ---
    segments = [
        part_coin("BTC", crypto["BTC"]["price"], crypto["BTC"]["change"]),
        part_coin("ETH", crypto["ETH"]["price"], crypto["ETH"]["change"]),
        part_coin("TON", crypto["TON"]["price"], crypto["TON"]["change"]),
        (f"$ {nice_num(fx['USDRUB'], 2)}", colors["USD"]),
        (f"‚Ç¨ {nice_num(fx['EURRUB'], 2)}", colors["EUR"])
    ]

    # --- –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–∫—Å—Ç–∞ ---
    x = 40
    y = height // 2
    separator = " | "  # —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

    # --- –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ ---
    for seg, col in segments * 3:
        # --- –¢–µ–Ω—å –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º ---
        shadow_offset = 2
        draw.text((x + shadow_offset, y + shadow_offset), seg,
                  font=FONT_40, fill=(0, 0, 0), anchor="lm")
        draw.text((x, y), seg, font=FONT_40, fill=col, anchor="lm")

        # --- –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ---
        x += draw.textlength(seg, font=FONT_40) + draw.textlength(separator, font=FONT_40)
        draw.text((x - draw.textlength(separator, font=FONT_40), y),
                  separator, font=FONT_40, fill=(220, 220, 230), anchor="lm")


    # --- –ª—ë–≥–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É ---
    draw.rectangle((0, 0, width, 2), fill=(40, 50, 70))
    draw.rectangle((0, height - 2, width, height), fill=(40, 50, 70))

    return img, "ticker"

def make_ticker_frames(crypto, fx, frame_w=1280, frame_h=220,
                       duration=None, fps=24, speed_px_per_s=None):
    duration = duration or TICKER_DUR
    speed_px_per_s = speed_px_per_s or TICKER_SPEED
    surf, _ = build_ticker_surface(crypto, fx, width=2400, height=frame_h)
    w = surf.size[0]
    frames = []
    shift = speed_px_per_s / fps
    total = duration * fps
    x = 0
    for _ in range(total):
        xi = int(x) % w
        if xi + frame_w <= w:
            crop = surf.crop((xi, 0, xi + frame_w, frame_h))
        else:
            p1 = surf.crop((xi, 0, w, frame_h))
            p2 = surf.crop((0, 0, frame_w - (w - xi), frame_h))
            crop = Image.new("RGB", (frame_w, frame_h))
            crop.paste(p1, (0, 0)); crop.paste(p2, (p1.size[0], 0))
        frames.append(crop)
        x += shift
    return frames

async def send_ticker(bot: Bot, as_mp4=True):
    try:
        async with aiohttp.ClientSession() as s:
            crypto, fx = await get_crypto(s), await get_fx(s)
        frames = make_ticker_frames(crypto, fx)
        if as_mp4:
            clip = ImageSequenceClip([np.array(f.convert("RGB")) for f in frames], fps=24)
            tmp = "ticker_tmp.mp4"
            clip.write_videofile(tmp, codec="libx264", audio=False, fps=24,
                                 preset="medium", bitrate="1800k",
                                 verbose=False, logger=None)
            with open(tmp, "rb") as f: raw = f.read()
            try: os.remove(tmp)
            except Exception: pass
            media = BufferedInputFile(raw, filename="ticker.mp4")
            await bot.send_animation(chat_id=TARGET_CHAT_ID, animation=media, caption="–£—Ç—Ä–µ–Ω–Ω–∏–π —Ç–∏–∫–µ—Ä üìä")
        else:
            import imageio
            bio = io.BytesIO()
            imageio.mimsave(bio, [np.array(f) for f in frames], format="GIF", duration=1/24)
            media = BufferedInputFile(bio.getvalue(), filename="ticker.gif")
            await bot.send_animation(chat_id=TARGET_CHAT_ID, animation=media, caption="–£—Ç—Ä–µ–Ω–Ω–∏–π —Ç–∏–∫–µ—Ä üìä")
        log.info("Ticker sent ‚úÖ")
    except Exception as e:
        log.exception(f"Ticker send failed: {e}")

# ================== PNG-–î–ê–ô–î–ñ–ï–°–¢ ==================
def render_digest(crypto, fx):
    W, H = 1280, 800
    img = Image.new("RGB", (W, H), (32,129,255))
    d = ImageDraw.Draw(img)

    def coin(x, y, color, label, val, ch):
        rr(d, (x, y, x+750, y+170), 36, fill=(232,243,255))
        d.ellipse((x+34, y+49, x+106, y+121), fill=color)
        d.text((x+70, y+85-18), label[0], anchor="mm", font=FONT_40, fill="white")
        d.text((x+140, y+30), f"$ {nice_num(val)}", font=FONT_56, fill=(30,30,30))
        arrow = "‚Üë" if ch >= 0 else "‚Üì"
        col = (7,170,75) if ch >= 0 else (220,60,60)
        d.text((x+140, y+130), f"{arrow}{abs(ch):.2f}%", font=FONT_36, fill=col)

    coin(40,  40, (247,147,26), "B", crypto["BTC"]["price"], crypto["BTC"]["change"])
    coin(40, 240, (136,99,255), "E", crypto["ETH"]["price"], crypto["ETH"]["change"])
    coin(40, 440, (0,163,224),  "T", crypto["TON"]["price"], crypto["TON"]["change"])

    rr(d, (830, 40, 1240, 400), 36, fill=(28,51,79))
    d.text((860, 70), "–ö–£–†–° –í–ê–õ–Æ–¢", font=FONT_36, fill=(210,225,240))
    d.text((860,170), f"$ {nice_num(fx['USDRUB'],2)}", font=FONT_48, fill=(230,240,255))
    d.text((860,260), f"‚Ç¨ {nice_num(fx['EURRUB'],2)}", font=FONT_48, fill=(230,240,255))

    rr(d, (830, 420, 1240, 780), 36, fill=(79,163,255))
    now = dt.datetime.now(tz(TZ_NAME))
    d.text((1035, 540), str(now.day), anchor="mm", font=FONT_56, fill="white")
    d.text((1035, 640), MONTHS_RU[now.month], anchor="mm", font=FONT_44, fill="white")
    return img

async def send_png(bot):
    try:
        async with aiohttp.ClientSession() as s:
            crypto, fx = await get_crypto(s), await get_fx(s)
        img = render_digest(crypto, fx)
        bio = io.BytesIO(); img.save(bio, "PNG")
        await bot.send_photo(
            chat_id=TARGET_CHAT_ID,
            photo=BufferedInputFile(bio.getvalue(), "digest.png"),
            caption="–£—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç üìä #crypto #fx"
        )
        log.info("PNG sent ‚úÖ")
    except Exception as e:
        log.exception(f"PNG send failed: {e}")

# ================== TELEGRAM ==================
router = Router()

@router.message(Command("test"))
async def on_test(msg: Message, bot: Bot):
    await post_now(bot)
    await msg.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª.")

async def post_now(bot: Bot):
    if USE_TICKER:
        await send_ticker(bot, as_mp4=TICKER_AS_MP4)
    else:
        await send_png(bot)

async def on_startup():
    if not BOT_TOKEN or BOT_TOKEN == "PUT_YOUR_TOKEN_HERE":
        log.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω"); return
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(); dp.include_router(router)

    scheduler = AsyncIOScheduler(timezone=tz(TZ_NAME))
    scheduler.add_job(post_now, "cron", [bot],
                      hour=POST_HOUR, minute=POST_MINUTE,
                      misfire_grace_time=3600, coalesce=True, jitter=30)
    scheduler.start()
    log.info(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {POST_HOUR:02d}:{POST_MINUTE:02d} ({TZ_NAME}); —Ä–µ–∂–∏–º={'TICKER' if USE_TICKER else 'PNG'}")

    if RUN_NOW:
        await post_now(bot)

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(on_startup())
